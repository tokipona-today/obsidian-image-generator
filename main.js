/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ImageGenerator
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var AVAILABLE_MODELS = [
  {
    id: "flux-schnell",
    name: "Flux Schnell",
    version: "39ed52f2a78e934b3ba6e2a89f5b1c712de7dfea535525255b1aa35c5565e08b",
    description: "Rapide et efficace"
  },
  {
    id: "flux-dev",
    name: "Flux Dev",
    version: "565461599b5f9b3c66881283fa040b770880c0c4bfa25dee269923b2c3d48e13",
    description: "Version de d\xE9veloppement"
  },
  {
    id: "flux-pro",
    name: "Flux Pro",
    version: "8acdb09559e65c59da7973c1b1142a318b28cf93c56614bf4145175061339378",
    description: "Version professionnelle haute qualit\xE9"
  }
];
var DEFAULT_SETTINGS = {
  replicateApiToken: "",
  defaultWidth: 1024,
  defaultHeight: 400,
  defaultModel: AVAILABLE_MODELS[0].id
};
var IMAGES_DIR = "images";
var MAX_POLLING_ATTEMPTS = 30;
var POLLING_INTERVAL = 2e3;
var DIMENSION_CONSTRAINTS = {
  min: 64,
  max: 2048
};
var ImageGenerator = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addCommand({
      id: "generate-image",
      name: "Generate Image",
      editorCallback: (editor, view) => {
        this.handleImageGeneration(editor);
      }
    });
    this.addSettingTab(new ImageGeneratorSettingTab(this.app, this));
  }
  async handleImageGeneration(editor) {
    if (!this.validateApiToken()) {
      return;
    }
    new ImagePromptModal(this.app, this.settings, async (prompt, width, height, modelId) => {
      await this.generateAndInsertImage(prompt, editor, width, height, modelId);
    }).open();
  }
  validateApiToken() {
    var _a;
    if (!((_a = this.settings.replicateApiToken) == null ? void 0 : _a.trim())) {
      new import_obsidian.Notice("\u26A0\uFE0F Veuillez configurer votre token API Replicate dans les param\xE8tres du plugin");
      this.app.setting.open();
      return false;
    }
    return true;
  }
  async generateAndInsertImage(prompt, editor, width, height, modelId) {
    try {
      new import_obsidian.Notice("\u{1F3A8} G\xE9n\xE9ration de l'image en cours...");
      await this.ensureImagesFolder();
      const imageUrl = await this.generateImage(prompt, width, height, modelId);
      if (!imageUrl) {
        throw new Error("\xC9chec de la g\xE9n\xE9ration de l'image");
      }
      const savedImagePath = await this.saveImage(imageUrl);
      editor.replaceSelection(`![${prompt}](${savedImagePath})`);
      new import_obsidian.Notice("\u2705 Image g\xE9n\xE9r\xE9e et ins\xE9r\xE9e avec succ\xE8s");
    } catch (error) {
      console.error("Erreur lors de la g\xE9n\xE9ration de l'image:", error);
      new import_obsidian.Notice("\u274C Erreur lors de la g\xE9n\xE9ration de l'image. V\xE9rifiez la console pour plus de d\xE9tails.");
    }
  }
  async ensureImagesFolder() {
    if (!await this.app.vault.adapter.exists(IMAGES_DIR)) {
      await this.app.vault.createFolder(IMAGES_DIR);
    }
  }
  async generateImage(prompt, width, height, modelId) {
    try {
      const prediction = await this.createPrediction(prompt, width, height, modelId);
      return await this.pollPredictionStatus(prediction.id);
    } catch (error) {
      console.error("Replicate API Error:", error);
      throw error;
    }
  }
  async createPrediction(prompt, width, height, modelId) {
    const model = AVAILABLE_MODELS.find((m) => m.id === modelId) || AVAILABLE_MODELS[0];
    const response = await (0, import_obsidian.requestUrl)({
      url: "https://api.replicate.com/v1/predictions",
      method: "POST",
      headers: this.getAuthHeaders(),
      body: JSON.stringify({
        version: model.version,
        input: { prompt, width, height }
      })
    });
    return response.json;
  }
  async pollPredictionStatus(predictionId) {
    var _a;
    for (let i = 0; i < MAX_POLLING_ATTEMPTS; i++) {
      const status = await (0, import_obsidian.requestUrl)({
        url: `https://api.replicate.com/v1/predictions/${predictionId}`,
        method: "GET",
        headers: this.getAuthHeaders()
      });
      const statusData = status.json;
      if (statusData.status === "succeeded") {
        return ((_a = statusData.output) == null ? void 0 : _a[0]) || null;
      }
      if (statusData.status === "failed") {
        throw new Error(statusData.error || "La g\xE9n\xE9ration a \xE9chou\xE9");
      }
      await this.delay(POLLING_INTERVAL);
    }
    throw new Error("Timeout: la g\xE9n\xE9ration a pris trop de temps");
  }
  getAuthHeaders() {
    return {
      "Authorization": `Token ${this.settings.replicateApiToken}`,
      "Content-Type": "application/json"
    };
  }
  async saveImage(imageUrl) {
    const filename = this.generateImageFilename();
    const imagePath = `${IMAGES_DIR}/${filename}`;
    try {
      const response = await (0, import_obsidian.requestUrl)({
        url: imageUrl,
        method: "GET"
      });
      await this.app.vault.adapter.writeBinary(imagePath, response.arrayBuffer);
      return imagePath;
    } catch (error) {
      console.error("Erreur lors du t\xE9l\xE9chargement de l'image:", error);
      throw new Error("Impossible de t\xE9l\xE9charger l'image g\xE9n\xE9r\xE9e");
    }
  }
  generateImageFilename() {
    const timestamp = new Date().toISOString().replace(/[:.]/g, "-");
    return `generated-image-${timestamp}.png`;
  }
  delay(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms));
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  onunload() {
    console.log("D\xE9chargement du plugin Image Generator");
  }
};
var ImagePromptModal = class extends import_obsidian.Modal {
  constructor(app, settings, onSubmit) {
    super(app);
    this.settings = settings;
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: "G\xE9n\xE9rer une image" });
    this.createInputs(contentEl);
    this.createButtons(contentEl);
    this.promptInput.focus();
  }
  createInputs(containerEl) {
    const inputsContainer = containerEl.createDiv({ cls: "modal-input-container" });
    this.createModelSelect(inputsContainer);
    this.promptInput = this.createPromptInput(inputsContainer);
    this.createDimensionsInputs(inputsContainer);
  }
  createModelSelect(container) {
    const modelContainer = container.createDiv({
      cls: "model-select-container",
      attr: {
        style: "margin-bottom: 12px;"
      }
    });
    modelContainer.createEl("label", {
      text: "Mod\xE8le",
      attr: {
        style: "display: block; margin-bottom: 4px;"
      }
    });
    this.modelSelect = modelContainer.createEl("select", {
      cls: "dropdown",
      attr: {
        style: "width: 100%; padding: 6px;"
      }
    });
    AVAILABLE_MODELS.forEach((model) => {
      const option = this.modelSelect.createEl("option", {
        text: `${model.name} - ${model.description}`,
        value: model.id
      });
      if (model.id === this.settings.defaultModel) {
        option.selected = true;
      }
    });
  }
  createPromptInput(container) {
    const promptContainer = container.createDiv({
      attr: {
        style: "margin-bottom: 12px;"
      }
    });
    promptContainer.createEl("label", {
      text: "Description",
      attr: {
        style: "display: block; margin-bottom: 4px;"
      }
    });
    return promptContainer.createEl("textarea", {
      attr: {
        placeholder: "D\xE9crivez l'image que vous souhaitez g\xE9n\xE9rer...",
        rows: "4",
        style: "width: 100%;"
      }
    });
  }
  createDimensionsInputs(container) {
    const dimensionsContainer = container.createDiv({
      cls: "dimensions-container",
      attr: {
        style: "display: flex; gap: 10px; margin-top: 10px;"
      }
    });
    this.widthInput = this.createDimensionInput(
      dimensionsContainer,
      "Largeur",
      this.settings.defaultWidth
    );
    this.heightInput = this.createDimensionInput(
      dimensionsContainer,
      "Hauteur",
      this.settings.defaultHeight
    );
  }
  createDimensionInput(container, label, defaultValue) {
    const wrapper = container.createDiv();
    wrapper.createEl("label", {
      text: label,
      attr: {
        style: "display: block; margin-bottom: 4px;"
      }
    });
    return wrapper.createEl("input", {
      type: "number",
      attr: {
        value: defaultValue.toString(),
        min: DIMENSION_CONSTRAINTS.min.toString(),
        max: DIMENSION_CONSTRAINTS.max.toString(),
        style: "width: 100px;"
      }
    });
  }
  createButtons(containerEl) {
    const buttonContainer = containerEl.createDiv({
      cls: "modal-button-container",
      attr: {
        style: "display: flex; justify-content: flex-end; gap: 8px; margin-top: 20px;"
      }
    });
    buttonContainer.createEl("button", {
      text: "G\xE9n\xE9rer",
      cls: "mod-cta"
    }).onclick = this.handleGenerate.bind(this);
    buttonContainer.createEl("button", {
      text: "Annuler"
    }).onclick = () => this.close();
  }
  handleGenerate() {
    const prompt = this.promptInput.value.trim();
    const width = parseInt(this.widthInput.value) || this.settings.defaultWidth;
    const height = parseInt(this.heightInput.value) || this.settings.defaultHeight;
    const modelId = this.modelSelect.value;
    if (!this.validateInputs(prompt, width, height)) {
      return;
    }
    this.onSubmit(prompt, width, height, modelId);
    this.close();
  }
  validateInputs(prompt, width, height) {
    if (!prompt) {
      new import_obsidian.Notice("\u26A0\uFE0F Veuillez entrer une description");
      return false;
    }
    if (!this.validateDimension(width) || !this.validateDimension(height)) {
      new import_obsidian.Notice(`\u26A0\uFE0F Les dimensions doivent \xEAtre comprises entre ${DIMENSION_CONSTRAINTS.min} et ${DIMENSION_CONSTRAINTS.max} pixels`);
      return false;
    }
    return true;
  }
  validateDimension(value) {
    return value >= DIMENSION_CONSTRAINTS.min && value <= DIMENSION_CONSTRAINTS.max;
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var ImageGeneratorSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    this.createSettingsUI(containerEl);
  }
  createSettingsUI(containerEl) {
    containerEl.createEl("h2", { text: "Param\xE8tres du g\xE9n\xE9rateur d'images" });
    this.createApiTokenSetting(containerEl);
    this.createModelSetting(containerEl);
    this.createDimensionSettings(containerEl);
    this.createHelpText(containerEl);
  }
  createApiTokenSetting(containerEl) {
    new import_obsidian.Setting(containerEl).setName("Token API Replicate").setDesc("Entrez votre token API Replicate").addText((text) => text.setPlaceholder("Entrez votre token").setValue(this.plugin.settings.replicateApiToken).onChange(async (value) => {
      this.plugin.settings.replicateApiToken = value.trim();
      await this.plugin.saveSettings();
    }));
  }
  createModelSetting(containerEl) {
    new import_obsidian.Setting(containerEl).setName("Mod\xE8le par d\xE9faut").setDesc("S\xE9lectionnez le mod\xE8le \xE0 utiliser par d\xE9faut").addDropdown((dropdown) => {
      AVAILABLE_MODELS.forEach((model) => {
        dropdown.addOption(model.id, `${model.name} - ${model.description}`);
      });
      dropdown.setValue(this.plugin.settings.defaultModel);
      dropdown.onChange(async (value) => {
        this.plugin.settings.defaultModel = value;
        await this.plugin.saveSettings();
      });
    });
  }
  createDimensionSettings(containerEl) {
    this.createDimensionSetting(containerEl, "Largeur par d\xE9faut", "defaultWidth");
    this.createDimensionSetting(containerEl, "Hauteur par d\xE9faut", "defaultHeight");
  }
  createDimensionSetting(containerEl, name, settingKey) {
    new import_obsidian.Setting(containerEl).setName(name).setDesc(`${name} par d\xE9faut pour les images g\xE9n\xE9r\xE9es (en pixels)`).addText((text) => text.setPlaceholder(DEFAULT_SETTINGS[settingKey].toString()).setValue(this.plugin.settings[settingKey].toString()).onChange(async (value) => {
      const dimension = parseInt(value);
      if (this.validateDimension(dimension)) {
        this.plugin.settings[settingKey] = dimension;
        await this.plugin.saveSettings();
      }
    }));
  }
  validateDimension(value) {
    return value >= DIMENSION_CONSTRAINTS.min && value <= DIMENSION_CONSTRAINTS.max;
  }
  createHelpText(containerEl) {
    const modelInfoEl = containerEl.createEl("div", {
      cls: "setting-item-description",
      attr: {
        style: "margin-top: 2em;"
      }
    });
    modelInfoEl.createEl("h3", { text: "Information sur les mod\xE8les disponibles" });
    const modelList = modelInfoEl.createEl("ul");
    AVAILABLE_MODELS.forEach((model) => {
      const li = modelList.createEl("li");
      li.createEl("strong", { text: model.name });
      li.appendChild(document.createTextNode(` - ${model.description}`));
    });
    const helpText = containerEl.createEl("p", {
      attr: {
        style: "margin-top: 2em;"
      }
    });
    helpText.appendChild(document.createTextNode("Pour obtenir votre token API Replicate, visitez : "));
    helpText.appendChild(
      createEl("a", {
        text: "https://replicate.com/account",
        attr: {
          href: "https://replicate.com/account",
          target: "_blank",
          rel: "noopener"
        }
      })
    );
  }
};
